<div id="logo">
  <%= image_tag("ls4.jpg", alt: "Luke Schoen", width: "55", height: "55") %>
</div>

<div class="social-media">
  <a href="https://plus.google.com/u/0/103113786777929863499" target="_blank" class="google">google</a>
  <a href="https://twitter.com/ltfschoen" target="_blank" class="twitter">twitter</a>
  <a href="http://www.linkedin.com/in/ltfschoen" target="_blank" class="linkedin">linkedin</a>
  <a href="https://github.com/ltfschoen" target="_blank" class="github">github</a>
  <a href="http://lukeschoen.blogspot.com.au/" target="_blank" class="blogspot">blogspot</a>
</div>

<div id="periods">
  <a href="#" class="button">
    <span class="arrow">
      <%= image_tag("_minus.jpg", alt: "-", width: "55", height: "55") %>
    </span>
    <span class="arrow" style="display: none;">
      <%= image_tag("_plus.jpg", alt: "+", width: "55", height: "55") %>
    </span>
  </a>
</div>

<div id="columns">
  <ul ng-repeat="website in portfolio.websites">
    <!-- hood refers to the black header colour -->
    <!-- <li ng-mouseover="disableHood(website)" ng-mouseleave="enableHood(website)"> -->
    <!-- <li ng-init="!blurred" ng-click="blurred=!blurred"> -->
    <li>
      <!-- <span ng-show="website.editable"><header>{{website.id}}</header></span> -->
      <!-- list of website buttons -->
      <a id="{{website.id}}" ng-href="{{website.url}}" target="new">
        <!-- class id looks up CSS to determines thumbnail to be shown -->
        <!-- <div ng-class="{'column {{website.id}} blur': blurred, 'column {{website.id}}': !blurred}"> -->
        <div class="column {{website.id}}">
          <header>{{website.name}}</header>
        </div>
      </a>
    </li>
  </ul>
</div>

<!-- START ADSENSE - ADSENSE TEMPORARILY DISABLED AS ERRONEOUS -->
<%# if Rails.env.production? %>

<!-- adsense -->
<!-- lukeschoen.herokuapp.com-bottom-ad -->
<!-- <div data-ads>
  <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
  <ins class="adsbygoogle"
     style="display:inline-block;width:320px;height:50px"
     data-ad-client="ca-pub-3774443777675026"
     data-ad-slot="9950770596"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
</div> -->

<%# end %>

<!-- END ADSENSE -->

<script>
  
  $(document).ready(function(){
    $("#columns").show();

    $(".button").click(function () {
      $(this).children(".arrow").toggle();
      $("#columns").toggle();
      return false;
    });

    var offsets;

    /* anonymous function that returns value */
    (function() {

      /*  Function object prototype property given
          method to declare new methods for defined class */
      Function.prototype.method = function(name, fn) {
        console.log("in prototype");
        this.prototype[name] = fn;
      };

      /* unused variables */
      var width = 800;
      var height = 600;
      var granularity = 10;
      var depth = 10;
      
      /*  function dfn in closure accessible from outside */
      offsets = function() {
        console.log("in offsets");
        return width * height;
      };

      showError = function(msg) {
        console.log("in showError");
        showError.qty = 0;
        showError.qty++;
        console.log("showError.qty is: " + showError.qty + " " + msg);
      };
      showError("(test error)");
      showError.qty = 0;
      console.log("showError.qty is: " + showError.qty + " " + "(attribute updated from outside function)");

      /*  define class Anim */
      var Anim = function(sizeStart, sizeFinish, date, kind) {
        console.log("in Anim with: " + sizeStart + " " + sizeFinish + " " + date + " " + kind);
        this.animSizeStart = sizeStart;
        this.animSizeFinish = sizeFinish;
        this.animDate = date;
        this.animKind = kind;
      };

      /*  methods store and act on internal state 
          with name of new method and associated function */
      Anim.prototype = {
        getSizeStart: function() {
          console.log("in getSizeStart");
          return this.animSizeStart;
        },
        getSizeFinish: function() {
          console.log("in getSizeFinish");
          return this.animSizeFinish;
        },
        getAnimDate: function() {
          console.log("in getAnimDate");
          return this.animDate;
        },
        getAnimKind: function() {
          console.log("in getAnimKind");
          return this.animKind;
        }
      };

      var animSizeStart = Anim.prototype.getSizeStart();
      var animSizeFinish = Anim.prototype.getSizeFinish();
      var animDate = Anim.prototype.getAnimDate();
      var animKind = Anim.prototype.getAnimKind();

      /*  modify the class */
      Anim.prototype.getSizeChange = function() {
        console.log("in getSizeChange");
        return this.getSizeFinish() - this.getSizeStart();
      };

      var change = Anim.prototype.getSizeChange();

      var animDateInstance = new Date(); // Date is built-in JS 
      var animMonthToday = animDateInstance.getMonth(); // assign
      //  instantiate class with (sizeStart, sizeFinish)
      var warp = new Anim(50, 100, animMonthToday, "Warp Animation");
      console.log("warp anim size start is: " + warp.animSizeStart);
      console.log("warp anim size finish is: " + warp.animSizeFinish);
      console.log("warp anim date is: " + warp.animDate);
      console.log("warp anim kind is: " + warp.animKind);

      /* Interface Class Constructor */
      var Interface = function(name, methods) {
        console.log("in Interface Class Constructor with:");
        console.log(" - name: " + name);
        console.log(" - methods: " + methods);
        if (arguments.length != 2) {
          throw new Error("Interface constructor called with " + arguments.length + "arguments, but expected exactly 2.");
        }
        this.name = name;
        this.methods = [];

        for (var i = 0, len = methods.length; i < len; i++) {
          if (typeof methods[i] !== 'string') {
            throw new Error("Interface constructor expects method names to be passed in as a string.");
          }
          this.methods.push(methods[i]);
        }
      };

      // Static class method.
      Interface.ensureImplements = function(object) {
        console.log("in Interface Static Class Method 'ensureImplements' with:");
        console.log(" - object: " + object);
        if (arguments.length < 2) {
          throw new Error("Function Interface.ensureImplements called with " + arguments.length + "arguments, but expected at least 2.");
        }

        for (var i = 1, len = arguments.length; i < len; i++) {
          var interface = arguments[i];
          if (interface.constructor !== Interface) {
            throw new Error("Function Interface.ensureImplements expects arguments two and above to be instances of Interface.");
          }

          for (var j = 0, methodsLen = interface.methods.length; j < methodsLen; j++) {
            var method = interface.methods[j];
            if (!object[method] || typeof object[method] !== 'function') {
              throw new Error("Function Interface.ensureImplements: object does not implement the " + interface.name + " interface. Method " + method + " was not found.");
            }
          }
        }
      };

      // Interface instance object created (for set of methods deemed as necesary)
      //  - Name of interface: 'AnimSet'
      //  - Required methods: 'getSizeStart', 'getSizeFinish', 'getAnimDate', 'getAnimKind' 
      // Note: Returns error if 
      var AnimSet = new Interface('AnimSet', ['getSizeStart', 'getSizeFinish', 'getAnimDate', 'getAnimKind']);
      console.log("AnimSet is: " + AnimSet);

      /*  Constructor uses ensureImplements instead of instanceOf to be Permissive 
          (more Loosely Coupled) by allowing other classes that matches the 
          Interface and that implement the required methods */
      var AnimFormatter = function(animObject) {
        // // REMOVED AS 'INSTANCE OF' DOES NOT CHECK METHODS IMPLEMENTED
        // if(!(animObject instanceOf Anim)) {
        //   throw new Error("AnimFormatter: constructor requires an instance " + "of Anim as an argument.");
        // }

        /* Accuracy check (ensure required methods implemented) */
        console.log("in AnimFormatter method with:");
        console.log(" - animObject: " + animObject);

        Interface.ensureImplements(animObject, AnimSet);

        this.animObject = animObject;
      };

      AnimFormatter.prototype.renderAnim = function(animObject) {
        console.log("in renderAdmin method. animObject is: " + animObject);
        // grab methods from Anim Class passed in and assign to variables
        var dateOfAnim = animObject.getAnimDate(); // call Anim method
        var animArray = animObject.getAnimKind(); // call Anim method
        console.log("grabbed dateOfAnim from Anim method of value: " + dateOfAnim);
        console.log("grabbed animArray from Anim method of value: " + animArray);
        
        // grab logo
        var myLogo = $("#logo");
        var randBig= Math.random()*(100000);
        
        function loopLi() {
          var i = 0
          if (i < randBig) {
            i++;
            // generate random number between 0 and 1
            randSmall = Math.random()*(1);
            // console.log(randSmall);
            myLogo.css("opacity", randSmall);
            // generate random number between 0 and 5000 (delay)
            randMid= Math.random()*(100);
            setTimeout(loopLi,randMid);
          }
        }
        loopLi();

        console.log("renderAnim method complete");

        return myLogo;
      }

      /*  Create new instance of AnimFormatter Class passing in instance of Anim Class 
          and its associated methods */
      var anim = new AnimFormatter(warp);
      console.log("anim is: " + anim);

      var render = AnimFormatter.prototype.renderAnim(warp);
  
    })(); 

    /*  access internal variables despite execution outside
        anonymous function */
    offsets();

  });

</script>