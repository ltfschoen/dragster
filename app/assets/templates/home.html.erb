<div id="logo">
  <%= image_tag("ls4.jpg", alt: "Luke Schoen", width: "55", height: "55") %>
</div>

<div class="social-media">
  <a href="https://plus.google.com/u/0/103113786777929863499" target="_blank" class="google">google</a>
  <a href="https://twitter.com/ltfschoen" target="_blank" class="twitter">twitter</a>
  <a href="http://www.linkedin.com/in/ltfschoen" target="_blank" class="linkedin">linkedin</a>
  <a href="https://github.com/ltfschoen" target="_blank" class="github">github</a>
  <a href="http://lukeschoen.blogspot.com.au/" target="_blank" class="blogspot">blogspot</a>
</div>

<div id="periods">
  <a href="#" class="button">
    <span class="arrow">
      <%= image_tag("_minus.jpg", alt: "-", width: "55", height: "55") %>
    </span>
    <span class="arrow" style="display: none;">
      <%= image_tag("_plus.jpg", alt: "+", width: "55", height: "55") %>
    </span>
  </a>
</div>

<div id="columns">
  <ul ng-repeat="website in portfolio.websites">
    <!-- hood refers to the black header colour -->
    <!-- <li ng-mouseover="disableHood(website)" ng-mouseleave="enableHood(website)"> -->
    <!-- <li ng-init="!blurred" ng-click="blurred=!blurred"> -->
    <li>
      <!-- <span ng-show="website.editable"><header>{{website.id}}</header></span> -->
      <!-- list of website buttons -->
      <a id="{{website.id}}" ng-href="{{website.url}}" target="new">
        <!-- class id looks up CSS to determines thumbnail to be shown -->
        <!-- <div ng-class="{'column {{website.id}} blur': blurred, 'column {{website.id}}': !blurred}"> -->
        <div class="column {{website.id}}">
          <header>{{website.name}}</header>
        </div>
      </a>
    </li>
  </ul>
</div>

<!-- START ADSENSE - ADSENSE TEMPORARILY DISABLED AS ERRONEOUS -->
<%# if Rails.env.production? %>

<!-- adsense -->
<!-- lukeschoen.herokuapp.com-bottom-ad -->
<!-- <div data-ads>
  <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
  <ins class="adsbygoogle"
     style="display:inline-block;width:320px;height:50px"
     data-ad-client="ca-pub-3774443777675026"
     data-ad-slot="9950770596"></ins>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
</div> -->

<%# end %>

<!-- END ADSENSE -->

<script>
  
  $(document).ready(function(){
    $("#columns").show();

    $(".button").click(function () {
      $(this).children(".arrow").toggle();
      $("#columns").toggle();
      return false;
    });

    var offsets;

    /* anonymous function that returns value */
    (function() {

      /*  Function object prototype property given
          method to declare new methods for defined class */
      Function.prototype.method = function(name, fn) {
        console.log("in prototype");
        this.prototype[name] = fn;
      };

      /* unused variables */
      var width = 800;
      var height = 600;
      var granularity = 10;
      var depth = 10;
      
      /*  function dfn in closure accessible from outside */
      offsets = function() {
        console.log("in offsets");
        return width * height;
      };

      showError = function(msg) {
        console.log("in showError");
        showError.qty = 0;
        showError.qty++;
        console.log("showError.qty is: " + showError.qty + " " + msg);
      };
      showError("(test error)");
      showError.qty = 0;
      console.log("showError.qty is: " + showError.qty + " " + "(attribute updated from outside function)");

      /*  define class Anim */
      var Anim = function(sizeStart, sizeFinish) {
        console.log("in Anim with: " + sizeStart + " " + sizeFinish);
        this.sizeStart = sizeStart;
        this.sizeFinish = sizeFinish;
      };

      /*  methods store and act on internal state 
          with name of new method and associated function */
      Anim.prototype = {
        getSizeStart: function() {
          console.log("in getSizeStart");
          return this.sizeStart;
        },
        getSizeFinish: function() {
          console.log("in getSizeFinish");
          return this.sizeFinish;
        }
      };

      var start = Anim.prototype.getSizeStart();
      var finish = Anim.prototype.getSizeFinish();

      /*  modify the class */
      Anim.prototype.getSizeChange = function() {
        console.log("in getSizeChange");
        return this.getSizeFinish() - this.getSizeStart();
      };

      var change = Anim.prototype.getSizeChange();

      //  instantiate class with (sizeStart, sizeFinish)
      var warp = new Anim(50, 100);
      console.log("warp start is: " + warp.sizeStart);
      console.log("warp finish is: " + warp.sizeFinish);
  
    })(); 

    /*  access internal variables despite execution outside
        anonymous function */
    offsets();

  });

</script>